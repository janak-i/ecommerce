c
@current_user ||= User.find_by(id: params["id"])
c
@current_user ||= User.find_by(id: params["id"])
c
@product.save
@product = Product.new(product_params)
c
user_role=="admin"
c
user_role
user_role == ‘admin’
c
user.role == ‘admin’
c
@current_user ||= User.find_by(id: params["id"])
c
User.find_by(id: params["id"])
c
@products=Product.all
c
@products=Product.all
c
@current_user ||= User.find_by(id: params["id"])
@current_user ||= User.find_by(id: params["id"]
c
@current_user ||= User.find_by(id: params["id"])
@current_user
User.find_by(id: params["id"])
c
User.find_by(id: params["id"])
c
User.find_by(id: params["id"])
@current_user ||= User.find_by(id: params["id"])
c
@current_user ||= User.find_by(id: params["id"])
c
user.errors.full_messages
user.errors
user && user.password_digest == params[:password_digest]
user = User.find_by(email: params[:email])
c
a.errors.full_messages
a
a=user && user.password_digest == params[:password_digest]
user && user.password_digest == params[:password_digest]
user = User.find_by(email: params[:email])
c
user = user_data
user_data = decode_data[0]["user_data"] unless !decode_data
decode_data[0]
decode_data = decode_user_data(request.headers["token"])
c
 user.save
user = User.new(email: params[:email], password_digest: params[:password_digest], user_role: params[:user_role])
c
c0
@product.save
@product = Product.new(name: "asas", description: "sdfsadfa", price: 400)
Product.new
c
product_params
c
Product.new(product_params)
Product.new
product_params
@product = Product.new(product_params)
c
@product = Product.new(product_params)
c
@products=Product.all
c
@products=Product.all
c
render json: {data: @products_to_json }, status: :ok
@products=Product.all
c
@products=Product.all
c
@products=Product.all
c
user = User.new(email: params[:email], password_digest: params[:password_digest], user_role: params[:user_role])
c
user.save
user = User.new(email: params[:email], password_digest: params[:password_digest])
c
user.save
user = User.new(email: params[:email], password_digest: params[:password_digest])
c
render json:ProductSerializer, status: :ok
ProductSerializer,
@product.present?
@product=Product.find(params[:product_id])
c
@product=Product.find(params[:product_id])
c
@product=Product.find(params[:id])
c
@products=Product.all
c
@products=Product.all
c
@order = Order.new(order_params)
@order = Order.new(order_params
c
  @order.save!
@order.update(user_id: @current_user.id)
@order = Order.new(order_params)
c
current_user ||= User.find_by(id: params["id"])
c
 reset_sessions_cart
@order.save!
add_line_items_to_order
@order.update(user_id: @current_user.id)
@order = Order.new(order_params)
c
@current_user ||= User.find_by(id: params["id"])
c
@order.update(user_id: @current_user.id)
@order = Order.new(order_params)
c
@products=Product.all
c
token = encode_user_data({ user_data: user.id })
user && user.password_digest == params[:password_digest]
user = User.find_by(email: params[:email])
c
user
user = user_data
user_data = decode_data[0]["user_data"] unless !decode_data
decode_data = decode_user_data(request.headers["token"])
c
token = encode_user_data({ user_data: user.id })
user.id
user.save
user = User.new(email: params[:email], password_digest: params[:password_digest])
c
user
user = user_data
user_data = decode_data[0]["user_data"] unless !decode_data
unless !decode_data
unless
decode_data
decode_data = decode_user_data(request.headers["token"])
request.headers["token"]
token
decode_data = decode_user_data(request.headers["token"])
c
user.save
user = User.new(email: params[:email], password_digest: params[:password_digest], User_role: params[:User_role])
c
user
user.password_digest
params[:password_digest]
user && user.password_digest == params[:password_digest].errors.full_messages
user && user.password_digest == params[:password_digest]
user = User.find_by(email: params[:email])
c
user.save
user = User.new(email: params[:email], password_digest: params[:password_digest])
